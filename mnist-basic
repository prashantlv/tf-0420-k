import tensorflow as tf
import matplotlib.pyplot as plt

mnist =  tf.keras.datasets.mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train,x_test = tf.keras.utils.normalize(x_train,axis=1), tf.keras.utils.normalize(x_test,axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(150, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(150, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

model.compile(
optimizer = 'adam',
loss = 'sparse_categorical_crossentropy',
metrics=['accuracy'])

model.fit(x_train, y_train, epochs = 10)
val_loss, val_acc = model.evaluate(x_test, y_test)
print('val_loss :',val_loss)
print('val_acc :', val_acc)

# to save it 
# model.save('name_of_model')
# load model
# model1 = tf.keras.models.load_model('name_of_model')
# make prediction
# predict = model1.predict([x_test])
# returns prob. array
# for better understadin...use np.argmax(predict[index])
